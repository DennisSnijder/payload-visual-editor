/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    posts: Post;
    tags: Tag;
    categories: Category;
    media: Media;
  };
  globals: {
    kitchenSink: KitchenSink;
  };
}
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Post {
  id: string;
  title: string;
  subtitle: string;
  category?: string | Category;
  tagsAndCategories?:
    | (
        | {
            value: string;
            relationTo: 'tags';
          }
        | {
            value: string;
            relationTo: 'categories';
          }
      )[]
    | (
        | {
            value: Tag;
            relationTo: 'tags';
          }
        | {
            value: Category;
            relationTo: 'categories';
          }
      )[];
  description?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Category {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Tag {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface KitchenSink {
  id: string;
  array: {
    text?: string;
    number?: number;
    id?: string;
  }[];
  blocks: (
    | {
        text1: string;
        text2: string;
        id?: string;
        blockName?: string;
        blockType: 'testBlock1';
      }
    | {
        number1?: number;
        number2?: number;
        id?: string;
        blockName?: string;
        blockType: 'testBlock2';
      }
  )[];
  checkbox: boolean;
  code: string;
  date: string;
  email: string;
  group?: {
    text?: string;
    number?: number;
  };
  json:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  number: number;
  /**
   * @minItems 2
   * @maxItems 2
   */
  point: [number, number];
  radio: 'radio1' | 'radio2';
  relationship1: string | Tag;
  relationship2: string[] | Tag[];
  relationship3:
    | {
        value: string | Category;
        relationTo: 'categories';
      }
    | {
        value: string | Tag;
        relationTo: 'tags';
      };
  relationship4:
    | (
        | {
            value: string;
            relationTo: 'categories';
          }
        | {
            value: string;
            relationTo: 'tags';
          }
      )[]
    | (
        | {
            value: Category;
            relationTo: 'categories';
          }
        | {
            value: Tag;
            relationTo: 'tags';
          }
      )[];
  richText: {
    [k: string]: unknown;
  }[];
  select1: 'select1' | 'select2';
  select2: ('select1' | 'select2')[];
  text: string;
  textarea: string;
  upload: string | Media;
  updatedAt?: string;
  createdAt?: string;
}
